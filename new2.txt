import zipfile

from PIL import Image, ImageDraw
import pytesseract
import cv2 as cv
import numpy as np
import os
# loading the face detection classifier
face_cascade = cv.CascadeClassifier('readonly/haarcascade_frontalface_default.xml')

# the rest is up to you!

#all images, texts and faces will be stored in one single dictionary 
img_txt_fac = {}

with zipfile.ZipFile('readonly/images.zip', 'r') as zipArchive:
    for entry in zipArchive.infolist():
        with zipArchive.open(entry) as file:
            img = Image.open(file).convert('RGB')
            img_txt_fac[entry.filename] = {'img':img}

#next, we extract rectangles of all faces from each picture. The resulting coordinates are used to crop the images 
# and append them to a list containing all images of faces for each initial image  
for im in img_txt_fac.keys():
    cv_im = np.array(img_txt_fac[im]['img']) 
    img_col = cv.cvtColor(cv_im, cv.COLOR_BGR2GRAY)
    bboxes = face_cascade.detectMultiScale(img_col, 1.3, 5)
    img_txt_fac[im]['faces'] = []
    for x,y,w,h in bboxes:
        box = img_txt_fac[im]['img'].crop((x,y,x+w,y+h))
        img_txt_fac[im]['faces'].append(box)

#next, we extract all text from each picture and write it to the above dict. as we only care about presence
#of a substring, we can ignore resource heavy formating 
for im in img_txt_fac.keys():
    text = pytesseract.image_to_string(img_txt_fac[im]['img'])
    img_txt_fac[im]['text'] = text
    
    #create thumbnails
for im in img_txt_fac.keys():
    for face in img_txt_fac[im]['faces']:
        #print(face.size)
        #display(face)
        face.thumbnail((100,100))#,Image.ANTIALIAS)
        #print(face.size)
        #display(face)
'''
#finally, we can create the contact sheets using the dictionaries. 
for each search string ('Christopher' and 'Mark') we are going to iterate through each picture, checking if
the desired string is present in the corresponding text. 
if it is, we add the already extracted faces to a contact sheet and display the result
'''
import math
for im in img_txt_fac:
    if 'Christopher' in img_txt_fac[im]['text']: #check, if the substring is in the corresponding text
        if(len(img_txt_fac[im]['faces']) != 0): #if no faces are found in the file, 
            print("Result found in file {}".format(im))
            h = math.ceil(len(img_txt_fac[im]['faces'])/5)
            contact_sheet=Image.new('RGB',(500, 100*h))
            x = 0
            y = 0
            for img in img_txt_fac[im]['faces']:
                contact_sheet.paste(img, (x, y))
                if x + 100 == contact_sheet.width:
                    x = 0
                    y += 100
                else:
                    x += 100

            display(contact_sheet)
        else:
            print("Result found in file {} \nBut there were no faces in that file\n\n".format(im))
for im in img_txt_fac:
    if 'Mark' in img_txt_fac[im]['text']: #check, if the substring is in the corresponding text
        if(len(img_txt_fac[im]['faces']) != 0): #if no faces are found in the file, 
            print("Result found in file {}".format(im))
            h = math.ceil(len(img_txt_fac[im]['faces'])/5)
            contact_sheet=Image.new('RGB',(500, 100*h))
            x = 0
            y = 0
            for img in img_txt_fac[im]['faces']:
                contact_sheet.paste(img, (x, y))
                if x + 100 == contact_sheet.width:
                    x = 0
                    y += 100
                else:
                    x += 100

            display(contact_sheet)
        else:
            print("Result found in file {} \nBut there were no faces in that file\n\n".format(im))
   

    


 

 

 

 

